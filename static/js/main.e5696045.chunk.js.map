{"version":3,"sources":["EnglishInput.tsx","KannadaOutput.tsx","api.ts","Favorite.tsx","Login.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["EnglishInput","text","onChange","onKannadize","className","type","value","placeholder","e","target","onKeyPress","key","length","onClick","KannadaOutput","kantext","Fragment","endpoint","getToken","token","document","cookie","match","RegExp","split","getFavorites","a","async","fetch","method","headers","Authorization","then","resp","json","Favorite","favorite","onDelete","english","kannada","Login","props","state","pass","this","onSubmit","isAngry","setState","React","Component","App","onInputChange","onLogin","initialLoading","body","JSON","stringify","undefined","catch","authenticate","favs","favorites","isLoggedIn","badPassword","fav","ind","findIndex","f","favoriteLoading","splice","onCreate","rank","createFavorite","push","translationLoading","isValid","isAuthed","map","Promise","resolve","toLocaleUpperCase","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e5696045.chunk.js","sourcesContent":["import React from 'react';\n\nimport './EnglishInput.css';\ninterface EnglishInputProps {\n    text: string;\n    onChange: (text: string) => unknown;\n    onKannadize: () => unknown;\n}\nconst EnglishInput: React.FC<EnglishInputProps> = ({ text, onChange, onKannadize }) => {\n    return (\n        <div className=\"english-input\">\n            <input\n                type=\"text\"\n                value={text}\n                placeholder=\"English...\"\n                onChange={e => onChange(e.target.value)}\n                onKeyPress={e => {\n                    if (e.key === 'Enter') {\n                        onKannadize();\n                    }\n                }}\n            />\n            <button\n                type=\"button\"\n                className={text.length > 0 ? 'is-ready' : ''}\n                onClick={() => onKannadize()}\n            >\n                Kannadize It!\n            </button>\n        </div>\n    );\n}\n\nexport default EnglishInput;","import React from 'react';\n\nimport './KannadaOutput.css';\n\ninterface KannadaOutputProps {\n    kantext: string;\n    onClick: () => unknown;\n}\n\nconst KannadaOutput: React.FC<KannadaOutputProps> = ({ kantext, onClick }) => {\n    return (\n        <div className=\"kannada-output\">\n            {\n                kantext.length === 0\n                ? <p><em>Hit Translate!</em></p>\n                : (\n                    <React.Fragment>\n                        <p>{kantext}</p>\n                        <button\n                            type=\"button\"\n                            onClick={onClick}\n                        >\n                            STAR\n                        </button>\n                    </React.Fragment>\n                )\n            }\n        </div>\n    )\n}\n\nexport default KannadaOutput;","export interface Favorite {\n    english: string;\n    kannada: string;\n    rank: number;\n};\n\nconst endpoint = 'https://9iepa55a3m.execute-api.us-east-1.amazonaws.com/Prod';\n\n// From https://stackoverflow.com/questions/260749/what-is-the-best-way-to-get-and-set-a-single-cookie-value-using-javascript\nfunction getToken(): string|undefined {\n    const token = (document.cookie + ';').match(new RegExp('token=.*;'));\n    if (token === null) {\n        return undefined;\n    }\n    return token[0].split(/=|;/)[1];\n}\n\nexport async function authenticate(pass: string): Promise<string|undefined> {\n    return fetch(`${endpoint}/authenticate`, {\n        method: 'POST',\n        body: JSON.stringify({ pass }),\n    })\n    .then(resp => resp.json())\n    .then(resp => {\n        if (resp.token === undefined) {\n            return undefined;\n        }\n        // store as cookie?\n        document.cookie = `token=${resp.token}`\n        return resp.token;\n    })\n    .catch(() => undefined);\n}\nexport async function isAuthenticated(): Promise<boolean> {\n    return fetch(`${endpoint}/authenticate`, {\n        method: 'GET',\n        headers: {\n            Authorization: `Bearer ${getToken()}`,\n        },\n    })\n    .then(resp => resp.json())\n    .then(resp => resp.isValid)\n    .catch(() => undefined);\n}\n\nexport async function getFavorites(): Promise<Favorite[]> {\n    return fetch(`${endpoint}/favorites`, {\n        method: 'GET',\n        headers: {\n            Authorization: `Bearer ${getToken()}`\n        }\n    }).then(resp => resp.json());\n}\n\nexport async function deleteFavorite(fav: Favorite): Promise<Response> {\n    return fetch(`${endpoint}/favorites`, {\n        method: 'DELETE',\n        body: JSON.stringify(fav),\n        headers: {\n            Authorization: `Bearer ${getToken()}`\n        }\n    });\n}\n\nexport async function createFavorite(fav: Favorite): Promise<Response> {\n    return fetch(`${endpoint}/favorites`, {\n        method: 'POST',\n        body: JSON.stringify(fav),\n        headers: {\n            Authorization: `Bearer ${getToken()}`,\n        }\n    });\n}\n\nexport async function reorderFavorite(fav: Favorite, newRank: number): Promise<Favorite[]> {\n    return fetch(`${endpoint}/favorites`, {\n        method: 'PATCH',\n        body: JSON.stringify({ oldRank: fav.rank, newRank }),\n        headers: {\n            Authorization: `Bearer ${getToken()}`,\n        }\n    }).then(() => getFavorites());\n}\n\nexport async function translate(english: string): Promise<string> {\n    return Promise.resolve(english.toLocaleUpperCase());\n}","import React from 'react';\nimport { Favorite as FavoriteType } from './api';\nimport './Favorite.css';\n\ninterface FavoriteProps {\n    favorite: FavoriteType;\n    onDelete: (english: string) => unknown;\n}\n\nconst Favorite: React.FC<FavoriteProps> = ({ favorite, onDelete }) => {\n    return (\n        <tr className=\"fav-record\">\n            <td>\n            <button\n                type=\"button\"\n                className=\"delete-record\"\n                onClick={() => onDelete(favorite.english)}\n            >\n                &times;\n            </button>\n            </td>\n            <td>\n            <p className=\"fav-english\">{favorite.english}</p>\n            </td>\n            <td>\n            <p className=\"fav-kannada\">{favorite.kannada}</p>\n            </td>\n        </tr>\n    );\n};\n\nexport default Favorite;","import React from 'react';\nimport './Login.css';\ninterface LoginProps {\n    isAngry: boolean;\n    onSubmit: (pass: string) => unknown;\n};\n\ninterface LoginState {\n    pass: string;\n};\n\nexport default class Login extends React.Component<LoginProps, LoginState> {\n    public constructor(props: LoginProps) {\n        super(props);\n\n        this.state = {\n            pass: '',\n        };\n    }\n\n    public render() {\n        const { onSubmit, isAngry } = this.props;\n        const { pass } = this.state;\n        return (\n            <div className={`login-dialog ${isAngry ? 'is-angry' : ''}`}>\n                <h2>\n                    {\n                        isAngry ? <em>Please give the *right* password!</em> : 'Welcome! Please login below'\n                    }\n                </h2>\n                <div className=\"login-controls\">\n                    <input\n                        type=\"password\"\n                        placeholder=\"Enter your Password...\"\n                        value={pass}\n                        onChange={e => this.setState({ pass: e.target.value })}\n                        onKeyPress={e => {\n                            if (e.key === 'Enter') {\n                                onSubmit(pass);\n                            }\n                        }}\n                    />\n                    <button\n                        type=\"button\"\n                        className={pass.length > 0 ? 'is-ready' : ''}\n                        onClick={() => onSubmit(pass)}\n                    >\n                        Log In\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport EnglishInput from './EnglishInput';\nimport KannadaOutput from './KannadaOutput';\nimport {\n  Favorite as FavoriteType,\n  isAuthenticated,\n  authenticate,\n  createFavorite,\n  deleteFavorite,\n  getFavorites,\n  translate\n} from './api';\nimport Favorite from './Favorite';\nimport './App.css';\nimport Login from './Login';\n\ninterface AppState {\n  text: string;\n  kantext: string;\n  favorites: FavoriteType[];\n  initialLoading: boolean;\n  favoriteLoading: boolean;\n  translationLoading: boolean;\n  isLoggedIn: boolean;\n  badPassword: boolean;\n}\n\nclass App extends React.Component<{}, AppState> {\n  public constructor(props: {}) {\n    super(props);\n    this.state = {\n      text: \"\",\n      kantext: \"\",\n      favorites: [],\n      initialLoading: true,\n      favoriteLoading: false,\n      translationLoading: false,\n      isLoggedIn: false,\n      badPassword: false,\n    };\n\n    // start up the favorites!\n    // check authentication...?\n    isAuthenticated()\n      .then(async isAuthed => {\n        if (!isAuthed) {\n          // get password from user\n          this.setState({\n            initialLoading: false,\n            isLoggedIn: false,\n          });\n          return;\n        } else {\n          // We're logged in!\n          this.setState({\n            isLoggedIn: true,\n          });\n          // Get favorites\n          return getFavorites()\n            // Set our favorites\n            .then(favs => this.setState({ favorites: favs }))\n            // We've finished loading!\n            .then(() => this.setState({ initialLoading: false }));\n        }\n    });\n  } \n\n  private onInputChange = (text: string) => {\n    this.setState({text});\n  }\n\n  private onLogin = (pass: string) => {\n    this.setState({ initialLoading: true });\n    authenticate(pass)\n      .then(token => {\n        if (token === undefined) {\n          // bad password, get angry\n          this.setState({\n            initialLoading: false,\n            isLoggedIn: false,\n            badPassword: true,\n          });\n        } else {\n          return getFavorites()\n            .then(favs => this.setState({ favorites: favs }))\n            .then(() => this.setState({\n              initialLoading: false,\n              isLoggedIn: true,\n            }));\n        }\n      })\n  }\n\n  private onDelete = (english: string) => {\n    const { favorites } = this.state;\n    const ind = favorites.findIndex(f => f.english === english);\n    if (ind === -1) {\n      return;\n    }\n    this.setState({ favoriteLoading: true });\n    deleteFavorite(favorites[ind])\n      .then(() => {\n        favorites.splice(ind, 1);\n        this.setState({ favorites });\n      })\n      .then(() => this.setState({ favoriteLoading: false }));\n  }\n\n  private onCreate = () => {\n    const { favorites, text, kantext } = this.state;\n    this.setState({ favoriteLoading: true });\n    const fav: FavoriteType = {\n      english: text,\n      kannada: kantext,\n      rank: favorites.length,\n    };\n    createFavorite(fav)\n      .then(() => {\n        favorites.push(fav);\n        this.setState({ favorites });\n      })\n      .then(() => this.setState({ favoriteLoading: false }))\n  }\n\n  public render() {\n    const { text, kantext, initialLoading, favorites, isLoggedIn, badPassword } = this.state;\n    if (initialLoading) {\n      return <p>Loading...</p>;\n    } else if (!isLoggedIn) {\n      return <Login onSubmit={this.onLogin} isAngry={badPassword} />\n    }\n    const favs = favorites.map(fav => {\n      return <Favorite key={fav.english} favorite={fav} onDelete={this.onDelete} />\n    });\n    return (\n      <div className=\"kanglish\">\n        <h1>Welcome to Kanglish!</h1>\n        <h2><em>Favorites</em></h2>\n        <table className=\"fav-translations\">\n          <thead>\n            <tr>\n              <th></th>\n              <th>English</th>\n              <th>Kannada</th>\n            </tr>\n          </thead>\n          <tbody>\n            {favs}\n          </tbody>\n        </table>\n        <div className=\"translator\">\n          <h2><em>Translate</em></h2>\n          <EnglishInput \n            text={text}\n            onChange={this.onInputChange}\n            onKannadize={() => {\n              translate(text)\n                .then(kantext => this.setState({kantext}));\n            }}  \n          />\n          <KannadaOutput kantext={kantext} onClick={this.onCreate} />\n        </div>\n      </div>  \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}