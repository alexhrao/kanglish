{"version":3,"sources":["EnglishInput.tsx","KannadaOutput.tsx","translate.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["EnglishInput","text","onChange","onKannadize","className","type","value","e","target","onClick","KannadaOutput","kantext","translate","english","a","async","Promise","resolve","toLocaleUpperCase","App","props","state","onInputChange","bind","this","setState","then","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gRAwBeA,EAlBmC,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,YAChE,OACI,yBAAKC,UAAU,iBACX,2BACIC,KAAK,OACLC,MAAOL,EACPC,SAAU,SAAAK,GAAC,OAAIL,EAASK,EAAEC,OAAOF,UAErC,4BACID,KAAK,SACLI,QAAS,kBAAMN,MAFnB,mBCAGO,EARqC,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAClD,OACI,yBAAKP,UAAU,kBACX,2BAAIO,K,gBCLDC,MAJf,SAAyBC,GAAzB,SAAAC,EAAAC,OAAA,yEACWC,QAAQC,QAAQJ,EAAQK,sBADnC,sCC2CeC,G,kBA/Bb,WAAmBC,GAAY,IAAD,8BAC5B,4CAAMA,KACDC,MAAQ,CACXpB,KAAM,GACNU,QAAS,IAEX,EAAKW,cAAgB,EAAKA,cAAcC,KAAnB,gBANO,E,2EASRtB,GACpBuB,KAAKC,SAAS,CAACxB,W,+BAEA,IAAD,SACUuB,KAAKH,MAAtBpB,EADO,EACPA,KAAMU,EADC,EACDA,QACb,OACE,yBAAKP,UAAU,YACb,oDACA,kBAAC,EAAD,CACEH,KAAMA,EACNC,SAAUsB,KAAKF,cACfnB,YAAa,WACXS,EAAUX,GACPyB,MAAK,SAAAf,GAAO,OAAI,EAAKc,SAAS,CAACd,kBAGtC,kBAAC,EAAD,CAAeA,QAASA,S,GA1BdgB,IAAMC,YCCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMd,MAAK,SAAAe,GACjCA,EAAaC,kB","file":"static/js/main.0f845a0c.chunk.js","sourcesContent":["import React from 'react';\ninterface EnglishInputProps {\n    text: string;\n    onChange: (text: string) => unknown;\n    onKannadize: () => unknown;\n}\nconst EnglishInput: React.FC<EnglishInputProps> = ({text, onChange, onKannadize}) => {\n    return (\n        <div className=\"english-input\">\n            <input\n                type=\"text\"\n                value={text}\n                onChange={e => onChange(e.target.value)}\n            />\n            <button\n                type=\"button\"\n                onClick={() => onKannadize()}\n            >\n                Kannadize It!\n            </button>\n        </div>\n    );\n}\n\nexport default EnglishInput;","import React from 'react';\n\ninterface KannadaOutputProps {\n    kantext: string;\n}\n\nconst KannadaOutput: React.FC<KannadaOutputProps> = ({kantext}) => {\n    return (\n        <div className=\"kannada-output\">\n            <p>{kantext}</p>\n        </div>\n    )\n}\n\nexport default KannadaOutput;","async function translate(english: string): Promise<string> {\n    return Promise.resolve(english.toLocaleUpperCase());\n}\n\nexport default translate;","import React from 'react';\nimport EnglishInput from './EnglishInput';\nimport KannadaOutput from './KannadaOutput';\nimport translate from './translate';\nimport logo from './logo.svg';\nimport './App.css';\n\ninterface AppState {\n  text: string;\n  kantext: string;\n}\nclass App extends React.Component<{}, AppState> {\n  public constructor(props: {}) {\n    super(props);\n    this.state = {\n      text: \"\",\n      kantext: \"\",\n    };\n    this.onInputChange = this.onInputChange.bind(this);\n  }\n\n  private onInputChange(text: string): void{\n    this.setState({text});\n  }\n  public render() {\n    const {text, kantext} = this.state;\n    return (\n      <div className=\"kanglish\">\n        <h1>Welcome to Kanglish!</h1>\n        <EnglishInput \n          text={text}\n          onChange={this.onInputChange}\n          onKannadize={() => {\n            translate(text)\n              .then(kantext => this.setState({kantext}));\n          }}  \n        />\n        <KannadaOutput kantext={kantext} />\n      </div>  \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}